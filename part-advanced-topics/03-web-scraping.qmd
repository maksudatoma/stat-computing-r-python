# Web Scraping {#sec-data-web}

## {{< fa bullseye >}} Objectives {.nonumber}

- Understand the structure of XML and HTML files
- Use developer tools to locate nodes of interest and CSS or XPATH to precisely identify those nodes
- Identify web pages that cannot be scraped using simple methods because of content injection
- Scrape data from web pages 
    - by reading in HTML tables directly using R or Python
    - by writing custom functions to pull data from individual fields


## HTML and XML Language Specification

Let's start at the beginning. 
**eXtensible Markup Language (XML)** was developed in the late 1990s to provide a flexible specification for documents, data files, and various other documents. 
You've (likely) been using XML-based documents for most of your life, either in Microsoft Office (.docx, .xlsx, .pptx - the x is for XML) or in web pages. 
**HyperText Markup Language (HTML)** is a specific flavor of XML [@wikimediacontributorsXML2025] that uses a defined set of fields to specify the composition of a web page. 
If you right click in your browser on this page, and "Inspect Source", you can see the HTML code that generates this book. 

### XML

XML documents are composed of a series of tags that look like this:

```
<tag-type attribute="value">Tag contents</tag-type>
```

Each tag name, `tag`, is enclosed in angle brackets, `<tag>`, and has a closing tag that starts with a slash but has the same name, `</tag>`. 
Tags can include additional information that is typically encoded in `key="value"` pairs - above, there is an `attribute` field that has value `value`. 


The XML 1.0 (5th edition) specification requires that

- The document contains only one element, called the **root** or document element, at the top level. No part of the root element appears in the content of any other element. 

- Any other elements 
    - are defined by start and end tags, and
    - nest properly within each other (are well formed)

- An element contains **text**, a sequence of characters. Legal characters are tab, carriage return, line feed, and the legal characters of [Unicode](https://home.unicode.org/) and [ISO/IEC 10646 (PDF warning)](https://unicode.org/L2/L2010/10038-fcd10646-main.pdf)^[This is a real rabbit hole if you are curious about the very technical details of what makes up a character in text.].  

- Comments start with `<!--` and end with `-->`. The `--` string cannot be present within the text of a comment. Comments may NOT end with `--->` - the specification requires exactly two dashes.


::: advanced 
#### Advanced: Additional XML metadata {-}

A valid XML document also contains some additional metadata at the start of the file. 
First, there should be an **XML declaration** that specifies the version of XML being used: `<?xml version="1.0"?>` (Note the `?` immediately before and after the angle brackets).

In addition, valid XML documents contain a **Document Type Definition (DTD)** that provides some information about valid tags used within the document. 

```
<!DOCTYPE Name (ExternalID)? '[' intSubset ']' >
```
Document Type Definition requirements:

- `Name` in the DTD has the same value as the root node tag name
- An Internal or External Subset of valid entity names (tag names) is provided. It is also possible to specify valid tag attributes, types, and other information within these listings. 

```
<?xml version="1.0"?> # <1> 
<!DOCTYPE greeting SYSTEM "hello.dtd"> # <2>
<greeting>Hello, world!</greeting>  # <3>
```

1. XML version declaration
2. Document Type Definition. `greeting` is the name, and the root node matches that name. `hello.dtd` is the system identifier and provides an address leading to an external document type declaration file
3. Root node. `greeting` is the tag name. `Hello, world!` is the tag value. The tag is closed with a valid, matching end tag.


```
<?xml version="1.0" encoding="UTF-8" ?> # <1> 
<!DOCTYPE greeting [ # <2> 
  <!ELEMENT greeting (#PCDATA)>
]>
<greeting>Hello, world!</greeting>  # <3> 
```

1. XML version declaration, specifying the document's text encoding
2. An internally defined DTD that specifies valid elements (tags) (the only valid element is `greeting`). Additional tags could be specified within the `[` `]` space, if desired.
3. The root node with value `Hello, world!`

:::

::: demo

### Demo: Exploring an XML file

The District of Columbia (Washington, DC) local government provides a [dataset of grocery store locations throughout the district](https://catalog.data.gov/dataset/grocery-store-locations) using a definition of full service grocery store that requires:

- Sales of six of the following categories of food:
    - Fresh fruits and vegetables
    - Fresh and uncooked meats, poultry and seafood
    - Dairy products
    - Canned foods
    - Frozen foods
    - Dry groceries and baked goods
    - Non-alcoholic beverages
- Either 50% of the store's total square footage, or 6000 square feet must be dedicated to selling the food products above.
- At least 5% of the selling area must be dedicated to each food category. 

The city then included some small grocery stores that are very close to meeting the full-service grocery store definition based on [Appendix D of a city-wide food system assessment](https://dcfoodpolicy.org/wp-content/uploads/2019/06/2018-food-system-assessment-final-6.13.pdf) (PDF warning).

We can [download the KML file](https://opendata.dc.gov/api/download/v1/items/1d7c9d0e3aac49c1aa88d377a3bae430/kml?layers=4) and change the extension to XML so that the file opens in a standard web browser, or we can directly download the KML file as an XML file as in the code chunk below. 
```{r, include = F}
options(width = 120)
```

```{r get-dc-grocery-data, error = T}
url <- "https://opendata.dc.gov/api/download/v1/items/1d7c9d0e3aac49c1aa88d377a3bae430/kml?layers=4"
filename <- "../data/DC_Grocery_Stores_2025.xml"

if(!file.exists(filename)) {
  download.file(url, destfile = filename, mode = "wb")
}

xml_text <- readLines(filename)
xml_tbl <- data.frame(line = 1:length(xml_text), 
                      xml = htmltools::htmlEscape(xml_text))
# Escaping the XML allows printing it out nicely in the book

knitr::kable(xml_tbl[c(1:10, 35:64, 3145:3151),], row.names = F)
```
```{r, include = F}
options(width = 80)
```

- The first line contains the document type definition and encoding.
- The second line contains a link to the [KML specification](https://schemas.opengis.net/kml/2.2.0/ogckml22.xsd), which is itself another XML document. Note that it is also a valid tag, so at the end of the file, we should find </kml>. 
- The third line is another tag that indicates that this is the start of the document.
- Lines 4-40 contain the dataset schema -- a list of all of the fields present for each store, along with their data type. 
- Line 41 defines a folder, which contains Placemarks (Line 42), which contain ExtendedData (Line 43). The `\t` characters are a text representation of tabs and indicate some indentation. 
- Each grocery store appears to be described by a Placemark node that contains ExtendedData nodes containing variables, along with a Point node that contains two coordinates (latitude and longitude). 


:::

::: column-margin
![Screenshot of DC_Grocery_Stores_2025.xml showing the nodes corresponding to the Schema definition and to one individual grocery store.](../images/advanced/DC_Grocery_Stores_2025_xml_screenshot_annotated.png){fig-alt='XML document with schema definition and store data for grocery store locations. The top section, labeled "Schema Definition," is enclosed in a blue border and contains XML schema elements describing various data fields related to grocery store locations. The fields include store name, address, zip code, phone number, and other identifiers. Each field is defined by a SimpleField tag with a name and type attribute. The bottom section, labeled "Individual Grocery Store Data," is enclosed in an orange border and provides detailed data about a specific grocery store location using XML tags. This includes the storeâ€™s name, address, phone number, GIS coordinates, and several other identifiers. The text "Schema Definition" and "Individual Grocery Store Data" are prominently displayed in larger font sizes within their respective sections.'}
:::

## References {#sec-webscraping-refs}