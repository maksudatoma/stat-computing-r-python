# Vectors, Matrices, Arrays, and Control Structures {#sec-data-struct}
<!-- Vectors, Matrices, and Numpy arrays. Logical indexing. -->

<!-- Lego pictures made with https://www.mecabricks.com/en/workshop -->

This chapter introduces some of the most important structures for storing and working with data: vectors, matrices, lists, and data frames. 

## Objectives

- Understand the differences between lists, vectors, data frames, matrices, and arrays in R and python
- Be able to use location-based indexing in R or python to pull out subsets of a complex data object
- 


## Data Structures Overview

In @sec-basic-var-types, we discussed 4 different data types: strings/characters, numeric/double/floats, integers, and logical/booleans. As you might imagine, things are about to get more complicated.

Data **structures** are more complex arrangements of information, but they are still (usually) created using the same data types we have previously discussed. 

|             | Homogeneous   | Heterogeneous |
|-------------|---------------|---------------|
| 1D          | vector        | list          |
| 2D          | matrix        | data frame    |
| N-D         | array         |               |

::: callout-warning
Those of you who have taken programming classes that were more computer science focused will realize that I am leaving out a lot of information about lower-level structures like pointers. 
I'm making a deliberate choice to gloss over most of those details in this chapter, because it's already hard enough to learn 2 languages worth of data structures at a time.
In addition, R doesn't have pointers [No Pointers in R, @matloffArtProgrammingTour2011], so leaving out this material in python streamlines teaching both two languages, at the cost of overly simplifying some python concepts. 
If you want to read more about the Python concepts I'm leaving out, check out @frippAnswerPythonPandas2016.
:::


## Lists

A **list** is a one-dimensional column of heterogeneous data - the things stored in a list can be of different types.

![A lego list: the bricks are all different types and colors, but they are still part of the same data structure.](../images/gen-prog/lego-list.png)

::: panel-tabset
### R {.unnumbered}

```{r list-r}
x <- list("a", 3, FALSE)
x
```

### Python {.unnumbered}

```{python list-py}
x = ["a", 3, False]
x
```
:::

The most important thing to know about lists, for the moment, is how to pull things out of the list. We call that process **indexing**.

### Indexing

Every element in a list has an **index** (a location, indicated by an integer position)[^05-vectors-1].

[^05-vectors-1]: Throughout this section (and other sections), lego pictures are rendered using https://www.mecabricks.com/en/workshop. It's a pretty nice tool for building stuff online!

::: panel-tabset
#### R concept {.unnumbered}

In R, we count from 1.

![An R-indexed lego list, counting from 1 to 5](../images/gen-prog/list-indexing-r.png)

#### R code {.unnumbered}

```{r, error = T}
x <- list("a", 3, FALSE)

x[1] # This returns a list
x[1:2] # This returns multiple elements in the list

x[[1]] # This returns the item
x[[1:2]] # This doesn't work - you can only use [[]] with a single index
```

In R, list indexing with `[]` will return a list with the specified elements.

To actually retrieve the item in the list, use `[[]]`. The only downside to `[[]]` is that you can only access one thing at a time.

#### Python concept {.unnumbered}

In Python, we count from 0.

![A python-indexed lego list, counting from 0 to 4](../images/gen-prog/list-indexing-py.png)

#### Python code {.unnumbered}

```{python}
x = ["a", 3, False]

x[0]
x[1]
x[0:2]
```

In Python, we can use single brackets to get an object or a list back out, but we have to know how **slices** work. Essentially, in Python, `0:2` indicates that we want objects 0 and 1, but want to stop at 2 (not including 2). If you use a slice, Python will return a list; if you use a single index, python just returns the value in that location in the list.
:::

We'll talk more about indexing as it relates to vectors, but indexing is a general concept that applies to just about any multi-value object.

## Vectors

A **vector** is a one-dimensional column of homogeneous data. 
**Homogeneous** means that every element in a vector has the same data type.

We can have vectors of any data type and length we want: 

![vectors of different data types](../images/gen-prog/lego-set-of-vectors.png){fig-alt="A picture of several stacks of lego bricks. First, there is a set of green-hued 1x1 bricks labeled `int`. Next, there is a set of red-hued 1x1 bricks labeled `lgl`, or logical. Then, there is a set of blue-hued 1x2 bricks labeled `float` and finally, a set of 1x3 purple-hued bricks labeled string. Each set of colored bricks has a different length."}


### Indexing by Location

Each element in a vector has an **index** - an integer telling you what the item's position within the vector is. I'm going to demonstrate indices with the string vector

| R                                                                         | Python                                                                              |
|----------------------------------|--------------------------------------|
| 1-indexed language                                                        | 0-indexed language                                                                  |
| Count elements as 1, 2, 3, 4, ..., N                                      | Count elements as 0, 1, 2, 3, , ..., N-1                                            |
| ![R lego vector, labeled with numbers 1-12](../images/gen-prog/lego-1x3-vector-R.png) | ![Python lego vector, labeled with numbers 0-11](../images/gen-prog/lego-1x3-vector-python.png) |

::: panel-tabset
#### R {.unnumbered}

In R, we create vectors with the `c()` function, which stands for "concatenate" - basically, we stick a bunch of objects into a row.

```{r vector-creation-r}
digits_pi <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)

# Access individual entries
digits_pi[1]
digits_pi[2]
digits_pi[3]

# R is 1-indexed - a list of 11 things goes from 1 to 11
digits_pi[0]
digits_pi[11]

# Print out the vector
digits_pi
```

#### Python Vectors {.unnumbered}

In python, we create vectors using the `array` function in the numpy module. 
To add a python module, we use the syntax `import <name> as <nickname>`. 
Many modules have conventional (and very short) nicknames - for `numpy`, we will use `np` as the nickname. 
Any functions we reference in the `numpy` module will then be called using `np.fun_name()` so that python knows where to find them.[^05-vectors-2]

```{python vector-creation-python, error = T}
import numpy as np
digits_list = [3,1,4,1,5,9,2,6,5,3,5]
digits_pi = np.array(digits_list)

# Access individual entries
digits_pi[0]
digits_pi[1]
digits_pi[2]

# Python is 0 indexed - a list of 11 things goes from 0 to 10
digits_pi[0]
digits_pi[11] 

# multiplication works on the whole vector at once
digits_pi * 2

# Print out the vector
print(digits_pi)
```

#### Python Series (Pandas)

Python has multiple things that look like vectors, including the `pandas` library's Series structure. 
A **Series** is a one-dimensional array-like object containing a sequence of values and an associated array of labels (called its index).

```{python series-pandas, error = T}
import pandas as pd
digits_pi = pd.Series([3,1,4,1,5,9,2,6,5,3,5])

# Access individual entries
digits_pi[0]
digits_pi[1]
digits_pi[2]

# Python is 0 indexed - a list of 11 things goes from 0 to 10
digits_pi[0]
digits_pi[11] 

# logical indexing works here too
digits_pi[digits_pi > 3]
# simple multiplication works in a vectorized manner
# that is, the whole vector is multiplied at once
digits_pi * 2

# Print out the series
print(digits_pi)
```

The Series object has a list of labels in the first printed column, and a list of values in the second. 
If we want, we can specify the labels manually to use as e.g. plot labels later:

```{python series-pandas2, error = T}
import pandas as pd
weekdays = pd.Series(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], index = ['S', 'M', 'T', 'W', 'R', 'F', 'Sat'])

# access individual objs
weekdays[0]
weekdays[1]
weekdays['S']
weekdays['Sat']

# access the index
weekdays.index
weekdays.index[6] = 'Z' # you can't assign things to the index to change it

weekdays
```
:::

[^05-vectors-2]: A similar system exists in R libraries, but R doesn't handle multiple libraries having the same function names well, which leads to all sorts of confusion. At least python is explicit about it.

We can pull out items in a vector by indexing, but we can also replace specific things as well:

::: ex
::: panel-tabset
#### R {.unnumbered}

```{r cat-vector-indexing}
favorite_cats <- c("Grumpy", "Garfield", "Jorts", "Jean")

favorite_cats

favorite_cats[2] <- "Nyan Cat"

favorite_cats
```

#### Python {.unnumbered}

```{python cat-vector-indexing-py}
favorite_cats = ["Grumpy", "Garfield", "Jorts", "Jean"]

favorite_cats

favorite_cats[1] = "Nyan Cat"

favorite_cats
```
:::

If you're curious about any of these cats, see the footnotes[^05-vectors-3].
:::

[^05-vectors-3]: [Grumpy cat](https://www.grumpycats.com/), [Garfield](https://www.garfield.com/), [Nyan cat](https://en.wikipedia.org/wiki/Nyan_Cat). Jorts and Jean: [The initial post](https://www.reddit.com/r/AmItheAsshole/comments/rfwgmc/aita_for_perpetuating_ethnic_stereotypes_about/) and the [update](https://www.reddit.com/user/throwawayorangecat/comments/rgi000/update_aita_for_perpetuating_stereotypes_about/) (both are worth a read because the story is hilarious). The cats also have a [Twitter account](https://twitter.com/JortsTheCat) where they promote workers rights.

### Indexing with Logical Vectors

As you might imagine, we can create vectors of all sorts of different data types. 
One particularly useful trick is to create a **logical vector** that goes along with a vector of another type to use as a **logical index**.

![lego vectors - a pink/purple hued set of 1x3 bricks representing the data and a corresponding set of 1x1 grey and black bricks representing the logical index vector of the same length](../images/gen-prog/lego-logical-full.png)

If we let the black lego represent "True" and the grey lego represent "False", we can use the logical vector to pull out all values in the main vector.

| Black = True, Grey = False                                                                                                                                                                                                                                                                             | Grey = True, Black = False                                                                                                                                                                                                                                                                            |
|------------------------------------|------------------------------------|
| ![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 black bricks representing the logical index vector of the same length. The grey bricks (and corresponding values of the previous vector) have been removed (filtered out).](../images/gen-prog/lego-logical-black.png) | ![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 grey bricks representing the logical index vector of the same length. The black bricks (and corresponding values of the previous vector) have been removed (filtered out).](../images/gen-prog/lego-logical-grey.png) |

Note that for logical indexing to work properly, the logical index must be the same length as the vector we're indexing. 
This constraint will return when we talk about data frames, but for now just keep in mind that logical indexing doesn't make sense when this constraint isn't true.

::: panel-tabset
### Indexing with logical vectors in R {.unnumbered}

```{r logical-vector-indexing-r}
# Define a character vector
weekdays <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
weekend <- c("Sunday", "Saturday")

# Create logical vectors
relax_days <- c(1, 0, 0, 0, 0, 0, 1) # doing this the manual way
relax_days <- weekdays %in% weekend # This creates a logical vector 
                                    # with less manual construction
relax_days

school_days <- !relax_days # FALSE if weekend, TRUE if not
school_days

# Using logical vectors to index the character vector
weekdays[school_days] # print out all school days
```

### Indexing with logical vectors in python {.unnumbered}

```{python logical-vector-indexing-python}
import numpy as np;

animals = np.array(["Cat", "Dog", "Snake", "Lizard", "Tarantula", "Hamster", "Gerbil", "Otter"])

# Define a logical vector
good_pets = np.array([True, True, False, False, False, True, True, False])
bad_pets = np.invert(good_pets) # Invert the logical vector 
                                # so True -> False and False -> True

animals[good_pets]
animals[bad_pets]

animals[~good_pets] # equivalent to using bad_pets
```
:::

### Reviewing Types

As vectors are a collection of things of a single type, what happens if we try to make a vector with differently-typed things?

::: panel-tabset
#### R {.unnumbered}

```{r vector-type-conversion-r}
c(2L, FALSE, 3.1415, "animal") # all converted to strings

c(2L, FALSE, 3.1415) # converted to numerics

c(2L, FALSE) # converted to integers
```

#### Python {.unnumbered}

```{python vector-type-conversion-python}
import numpy as np

np.array([2, False, 3.1415, "animal"]) # all converted to strings

np.array([2, False, 3.1415]) # converted to floats

np.array([2, False]) # converted to integers
```
:::

As a reminder, this is an example of **implicit** type conversion - R and python decide what type to use for you, going with the type that doesn't lose data but takes up as little space as possible.

### Try it Out! {.unnumbered .tryitout}

::: panel-tabset
#### Problem {.unnumbered}

Create a vector of the integers from one to 30. Use logical indexing to pick out only the numbers which are multiples of 3.

#### R Solution {.unnumbered}

```{r}
x <- 1:30
x [ x %% 3 == 0]
```

#### Python Solution {.unnumbered}

```{python}
import numpy as np
x = np.array(range(1, 31)) # because python is 0 indexed
x[ x % 3 == 0]
```
:::

::: panel-tabset
#### Challenge

Extra challenge: Pick out numbers which are multiples of 2 or 3, but not multiples of 6!

#### General Solution {.unnumbered}

This operation is **xor**, a.k.a. exclusive or. That is, X or Y, but not X AND Y.

We can write xor as `(X OR Y) & !(X AND Y)` -- or we can use a predefined function: `xor()` in R, `^` in python.

#### R Solution {.unnumbered}

```{r}
x <- 1:30

x2 <- x %% 2 == 0 # multiples of 2
x3 <- x %% 3 == 0 # multiples of 3
x2xor3 <- xor(x2, x3)
x2xor3_2 <- (x2 | x3) & !(x2 & x3)
x[x2xor3]
x[x2xor3_2]
```

#### Python Solution {.unnumbered}

```{python}
import numpy as np
x = np.array(range(1, 31))

x2 = x % 2 == 0 # multiples of 2
x3 = x % 3 == 0 # multiples of 3
x2xor3 = x2 ^ x3

x[x2xor3]
```
:::

## Matrices

A **matrix** is the next step after a vector - it's a set of values arranged in a two-dimensional, rectangular format.

::: panel-tabset
### Matrix (Lego) {.unnumbered}

![lego depiction of a 3-row, 4-column matrix of 2x2 red-colored blocks](../images/gen-prog/lego-2x2-matrix.png)

### R {.unnumbered}

```{r matrix-r}
# Minimal matrix in R: take a vector, 
# tell R how many rows you want
matrix(1:12, nrow = 3)

matrix(1:12, ncol = 3) # or columns

# by default, R will fill in column-by-column
# the byrow parameter tells R to go row-by-row
matrix(1:12, nrow = 3, byrow = T)

# We can also easily create square matrices 
# with a specific diagonal (this is useful for modeling)
diag(rep(1, times = 4))
```

### Python {.unnumbered}

In python, matrices are just a special case of a class called `ndarray` - n-dimensional arrays.

```{python}
import numpy as np
# Minimal ndarray in python by typing in the values in a structured format
np.array([[0,  1,  2],
          [3,  4,  5],
          [6,  7,  8],
          [9, 10, 11]])
# This syntax creates a list of the rows we want in our matrix

# Matrix in python using a data vector and size parameters
np.reshape(range(0,12), (3,4))
np.reshape(range(0,12), (4,3))
np.reshape(range(0,12), (3,4), order = 'F')
```

In python, we create 2-dimensional arrays (aka matrices) either by creating a list of rows to join together or by reshaping a 1-dimensional array. 
The trick with reshaping the 1-dimensional array is the order argument: 'F' stands for "Fortran-like" and 'C' stands for "C-like"... so to go by column, you use 'F' and to go by row, you use 'C'. 
Totally intuitive, right?

:::

Most of the problems we're going to work on will not require much in the way of matrix or array operations. 
For now, you need the following:

-   Know that matrices exist and what they are (2-dimensional arrays of numbers)
-   Understand how they are indexed (because it is extremely similar to data frames that we'll work with in the next chapter)
-   Be aware that there are lots of functions that depend on matrix operations at their core (including linear regression)

For more on matrix operations and matrix calculations, see @sec-matrix-calcs.

### Indexing in Matrices

Both R and python use \[row, column\] to index matrices. To extract the bottom-left element of a 3x4 matrix in R, we would use \[3,1\] to get to the third row and first column entry; in python, we would use \[2,0\] (remember that Python is 0-indexed).

As with vectors, you can replace elements in a matrix using assignment.

::: panel-tabset
#### R {.unnumbered}

```{r}
my_mat <- matrix(1:12, nrow = 3, byrow = T)

my_mat[3,1] <- 500

my_mat
```

#### Python {.unnumbered}

Remember that zero-indexing!

```{python}
import numpy as np

my_mat = np.reshape(range(1, 13), (3,4))

my_mat[2,0] = 500

my_mat
```
:::

### Matrix Operations

There are a number of matrix operations that we need to know for basic programming purposes:

-   scalar multiplication 
$$c*\textbf{X} = c * \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right] = \left[\begin{array}{cc} c*x_{1,1} & c*x_{1, 2}\\c*x_{2,1} & c*x_{2,2}\end{array}\right]$$
-   transpose - flip the matrix across the left top -\> right bottom diagonal. 
$$t(\textbf{X}) = \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right]^T = \left[\begin{array}{cc} x_{1,1} & x_{2,1}\\x_{1,2} & x_{2,2}\end{array}\right]$$
-   matrix multiplication (dot product) - If you haven't had this in Linear Algebra, here's a preview. [See @mathisfunHowMultiplyMatrices2021 for a better explanation]
$$\textbf{X}*\textbf{Y} = \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right] * \left[\begin{array}{cc} y_{1,1} \\y_{2,1} \end{array}\right] = \left[\begin{array}{c}x_{1,1}*y_{1,1} + x_{1,2}*y_{2,1} \\x_{2, 1}*y_{1,1} + x_{2,2}*y_{2,1}\end{array}\right]$$ 
Note that matrix multiplication depends on having matrices of compatible dimensions. 
If you have two matrices of dimension $(a \times b)$ and $(c \times d)$, then $b$ must be equal to $c$ for the multiplication to work, and your result will be $(a \times d)$.

::: panel-tabset
#### R {.unnumbered}

```{r, results = 'show'}
x <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = T)
y <- matrix(c(5, 6), nrow = 2)

# Scalar multiplication
x * 3
3 * x

# Transpose
t(x)
t(y)

# matrix multiplication (dot product)
x %*% y
```

#### Python {.unnumbered}

```{python}
import numpy as np
x = np.array([[1,2],[3,4]])
y = np.array([[5],[6]])

# scalar multiplication
x*3
3*x

# transpose
x.T # shorthand
x.transpose() # Long form

# Matrix multiplication (dot product)
np.dot(x, y)
```
:::

## Arrays

Arrays are a generalized n-dimensional version of a vector: all elements have the same type, and they are indexed using square brackets in both R and python: `[dim1, dim2, dim3, ...]`

I don't think you will need to create 3+ dimensional arrays in this class, but if you want to try it out, here is some code.

::: panel-tabset
### R {.unnumbered}

```{r}
array(1:8, dim = c(2,2,2))
```

Note that displaying this requires 2 slices, since it's hard to display 3D information in a 2D terminal arrangement.

### Python {.unnumbered}

```{python}
import numpy as np

np.array([[[1,2],[3,4]],[[5,6], [7,8]]])
```
:::


## Data Frames

A data frame is a special type of list - one in which each element in the list is a vector of the same length. 
If you put these vectors side-by-side, you get a table of data that looks like a spreadsheet. 
In Python, a DataFrame is a dict of Series. 

The lego version of a data frame looks like this:

![A data frame with 4 columns. A data frame is essentially a list where all of the components are vectors or lists, and are constrained to have the same length.](../images/gen-prog/lego-data-frame.png){width=50%}



::: panel-tabset

### R {- .unnumbered}

When you examine the structure of a data frame, as shown below, you get each column shown in a row, with its type and the first few values in the column. The `head(n)` command shows the first $n$ rows of a data frame (enough to see what's there, not enough to overflow your screen).

```{r dataframes}
data(mtcars) # Load the data -- included in base R
head(mtcars) # Look at the first 6 rows
str(mtcars) # Examine the structure of the object
```

You can change column values or add new columns easily using assignment. 
The `summary()` function can be used on specific columns to perform summary operations (a 5-number summary useful for making e.g. boxplots is provided by default).

```{r dfcols-sum}
mtcars$gpm <- 1/mtcars$mpg # gpm is sometimes used to assess efficiency

summary(mtcars$gpm)
summary(mtcars$mpg)
```

Often, it is useful to know the dimensions of a data frame. 
The number of rows can be obtained by using `nrow(df)` and similarly, the columns can be obtained using `ncol(df)` (or, get both with `dim()`). 
There is also an easy way to get a summary of each column in the data frame, using `summary()`.

```{r summary-mtcars}
summary(mtcars)
dim(mtcars)
nrow(mtcars)
ncol(mtcars)
```

Missing variables in an R data frame are indicated with `NA`.

### Python {- .unnumbered}

When you examine the structure of a data frame, as shown below, you get each column shown in a row, with its type and the first few values in the column. 
The `df.head(n)` command shows the first $n$ rows of a data frame (enough to see what's there, not enough to overflow your screen).

```{python dataframes-py}
mtcars = pd.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/datasets/mtcars.csv")

mtcars.head(5)

mtcars.info()
```

You can change column values or add new columns easily using assignment. 
It's also easy to access specific columns to perform summary operations. 
You can access a column named xyz using `df.xyz` or using `df["xyz"]`. 
To create a new column, you must use `df["xyz"]`.

```{python dfcols-sum-py}
mtcars["gpm"] = 1/mtcars.mpg # gpm is sometimes used to assess efficiency

mtcars.gpm.describe()
mtcars.mpg.describe()
```

Often, it is useful to know the dimensions of a data frame. 
The dimensions of a data frame (rows x columns) can be accessed using `df.shape`. 
There is also an easy way to get a summary of each column in the data frame, using `df.describe()`.

```{python summary-mtcars-py}
mtcars.describe()
mtcars.shape
```

Missing variables in a pandas data frame are indicated with `nan` or `NULL`.


:::


:::{.callout-tip}
### Try it out: Data Frames {.unnumbered}

::: panel-tabset

#### Setup {- .unnumbered}

The dataset `state.x77` contains information on US state statistics in the 1970s. By default, it is a matrix, but we can easily convert it to a data frame, as shown below.

```{r state-facts-tryitout}
data(state)
state_facts <- data.frame(state.x77)
state_facts <- cbind(state = row.names(state_facts), state_facts, stringsAsFactors = F) 
# State names were stored as row labels
# Store them in a variable instead, and add it to the data frame

row.names(state_facts) <- NULL # get rid of row names

head(state_facts)

# Write data out so that we can read it in using Python
write.csv(state_facts, file = "data/state_facts.csv", row.names = F)
```

We can write out the built in R data and read it in using `pd.read_csv`, which creates a DataFrame in pandas.

```{python state-facts-tryitout-py}
import pandas as pd

state_facts = pd.read_csv("https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/data/state_facts.csv")
```


#### Problem {- .unnumbered}

1. How many rows and columns does it have? Can you find different ways to get that information?

2. The `Illiteracy` column contains the percent of the population of each state that is illiterate. Calculate the number of people in each state who are illiterate, and store that in a new column called `TotalNumIlliterate`. Note: `Population` contains the population in thousands.

3. Calculate the average population density of each state (population per square mile) and store it in a new column `PopDensity`. Using the R reference card, can you find functions that you can combine to get the state with the minimum population density?

#### R Solution {- .unnumbered}

```{r state-facts-tryitout-solutions}
# 3 ways to get rows and columns
str(state_facts)
dim(state_facts)
nrow(state_facts)
ncol(state_facts)

# Illiteracy
state_facts$TotalNumIlliterate <- state_facts$Population * 1e3 * (state_facts$Illiteracy/100) 

# Population Density
state_facts$PopDensity <- state_facts$Population * 1e3/state_facts$Area 
# in people per square mile

# minimum population
state_facts$state[which.min(state_facts$PopDensity)]
```


#### Python Solution {- .unnumbered}

```{python state-facts-tryitout-solutions-py}
# Ways to get rows and columns
state_facts.shape
state_facts.index.size # rows
state_facts.columns.size # columns
state_facts.info() # columns + rows + missing counts + data types

# Illiteracy
state_facts["TotalNumIlliterate"] = state_facts["Population"] * 1e3 * state_facts["Illiteracy"]/100

# Population Density
state_facts["PopDensity"] = state_facts["Population"] * 1e3/state_facts["Area"] 
# in people per square mile

# minimum population
min_dens = state_facts["PopDensity"].min()
# Get location of minimum population
loc_min_dens = state_facts.PopDensity.isin([min_dens])
# Pull out matching state
state_facts.state[loc_min_dens]
```

:::
:::

### Creating Data Frames

It is also possible to create data frames from scratch by building them out of simpler components, such as vectors or dicts of lists. 
This tends to be useful for small data sets, but it is more common to read data in from e.g. CSV files, which I've used several times already but haven't yet shown you how to do (see @sec-data-input for the full how-to).

::: panel-tabset

#### R {- .unnumbered}


```{r math-lsd-r}
math_and_lsd <- data.frame(
  lsd_conc = c(1.17, 2.97, 3.26, 4.69, 5.83, 6.00, 6.41),
  test_score = c(78.93, 58.20, 67.47, 37.47, 45.65, 32.92, 29.97))
math_and_lsd

# add a column - character vector
math_and_lsd$subjective <- c("finally coming back", "getting better", "it's totally better", "really tripping out", "is it over?", "whoa, man", "I can taste color, but I can't do math")

math_and_lsd
```


#### Python {- .unnumbered}

```{python math-lsd-py}
math_and_lsd = pd.DataFrame({
  "lsd_conc": [1.17, 2.97, 3.26, 4.69, 5.83, 6.00, 6.41],
  "test_score": [78.93, 58.20, 67.47, 37.47, 45.65, 32.92, 29.97]})
math_and_lsd

# add a column - character vector
math_and_lsd["subjective"] = ["finally coming back", "getting better", "it's totally better", "really tripping out", "is it over?", "whoa, man", "I can taste color, but I can't do math"]

math_and_lsd
```

:::



## References  {#sec-data-struct-refs}

