{
  "hash": "a14af9c6053fad54b186c16a66150cf2",
  "result": {
    "markdown": "# Scripts and Notebooks {#sec-scripts-notebooks}\n\n## {{< fa bullseye >}} Objectives {.nonumber}\n\n- Understand the different modes that can be used to interact with a programming language\n- Identify which mode and language is being used given a screenshot or other contextual information\n- Select the appropriate mode (interactive, script, notebook) for a given task given considerations such as target audience, human intervention, and need to repeat the analysis.\n\n## A Short History of Talking to Computers\n\nThe fundamental goal of this chapter is to learn how to talk to R and Python. In the very beginning, people told computers what to do using punch cards [@punched2023]. This required that you have every step of your program and data planned out in advance - you'd submit your punch cards to the computer, and then come back 24-72 hours later to find out you'd gotten two cards out of order. Dropping a tray of punch cards was ... problematic.\n\nThankfully, we're mostly free of the days where being a bit clumsy could erase a semester of hard work. As things grew more evolved and we got actual monitors and (eventually) graphical interfaces, we started using interactive terminals (**interactive mode**) to boss computers around.\n\n::: callout-tip\n### Your Turn - Interactive Mode\n\n::: panel-tabset\n#### R\n\nOpen RStudio and navigate to the Console tab. You can issue commands directly to R by typing something in at the `>` prompt.\n\nTry typing in `2+2` and hit enter.\n\n#### Python\n\nOpen RStudio and navigate to the Terminal tab. This is your computer's 'terminal' - where you tell the computer what to do.\n\nFirst, we have to tell it what language we'd like to work in - by default, it's going to work in {{< fa brands windows >}} Batch (Windows), {{< fa brands apple >}} Zsh (Mac), or {{< fa brands linux >}} Bash (Linux). Luckily, we can avoid these and tell the computer we want to work in python by typing in `python3` or `python` (depending on how your computer is set up). This will launch an interactive python session (**ipython**).\n\nYou should get a prompt that looks like this: `>>>`\n\nType in `2+2` and hit enter.\n:::\n:::\n\nInteractive mode is useful for quick, one-off analyses, but if you need to repeat an analysis (or remember what you did), interactive mode is just awful. Once you close the program, the commands (and results) are gone. This is particularly inconvenient when you need to run the same task multiple times. For example, each day I may want to pull the weather forecast and observed weather values from the national weather service using the same commands. I don't want to manually re-type them each day!\n\nTo somewhat address this issue, most computing languages allow you to provide a sequence of commands in a text file known as a **script**. Scripts are typically meant to run on their own - they may perform computations, format data and save it, scrape data from the web... the possibilities are endless, but they are typically meant to run without the person running the script having to read all of the commands.\n\n::: callout-tip\n### Your Turn - Terminal Mode\n\n1. Download [scripts.zip](../files/scripts.zip) and unzip the file.\n\n2. Open a system terminal in the directory where you unzipped the files.    \n\n::: panel-tabset\n\n#### {{< fa brands windows >}} Windows \n\nOpen the folder. Type cmd into the location bar at the top of the window and hit enter. The command prompt will open in the desired location.\n\n#### {{< fa brands apple >}} Mac \n\nOpen a finder window and navigate to the folder you want to use. If you don't have a path bar at the bottom of the finder window, choose View \\> Show Path Bar. Control-click the folder in the path bar and choose Open in Terminal.\n\n#### {{< fa brands linux >}} Linux \n\nOpen the folder in your file browser. Select the path to the folder in the path bar and copy it to the clipboard. Launch a terminal and type `cd`, and then paste the copied path. Hit enter. (There may be more efficient ways to do this, but these instructions work for most window managers).\n:::\n\n3. Now, let's try out script mode in R and Python!\n\n::: panel-tabset\n### R\n\nThis assumes that the R binary has been added to your system path. If these instructions don't work, please ask for help or visit office hours.\n\nIn the terminal, type `Rscript words.R dickens-oliver-twist.txt`\n\nYou should get some output that looks like this:\n\n    user@computer:~/scripts$ Rscript words.R dickens-oliver-twist.txt \n    text\n     the  and        to   of    a  his   in   he  was \n    8854 4902 4558 3767 3763 3569 2272 2224 1931 1684\n\n### Python\n\nThis assumes that the python binary has been added to your system path. If these instructions don't work, please ask for help or visit office hours.\n\nIn the terminal, type `python3 words.py` and hit Enter. You will be prompted for the file name. Enter `dickens-oliver-twist.txt` and hit Enter again.\n\nYou should get some output that looks like this:\n\n    user@computer:~/scripts$ python3 words.py \n    Enter file:dickens-oliver-twist.txt\n    the 8854\n:::\n:::\n\nScripts, and compiled programs generated from scripts, are responsible for much of what you interact with on a computer or cell phone day-to-day. When the goal is to process a file or complete a task in exactly the same way each time, a script is the right choice for the job.\n\nHowever, when working with data, we sometimes prefer to combine scripts with interactive mode - that is, we use a script file to keep track of which commands we run, but we run the script interactively. About 60% of my day-to-day computing is done using R or python scripts that are run interactively.\n\n::: callout-tip\n### Your Turn - Script Mode\n\nIf you haven't already, download [scripts.zip](../files/scripts.zip) and unzip the file.\n\nOpen RStudio and use RStudio to complete the following tasks.\n\n::: panel-tabset\n#### R\n\n1.  Use RStudio to open the `words-noinput.R` file in the `scripts` folder you downloaded and unzipped.\n\n2.  What do you notice about the appearance of the file? Is there an icon in the tab to tell you what type of file it is? Are some words in the file highlighted?\n\n3.  Copy the path to the scripts folder.\\\n    OS Specific Instructions: [{{< fa brands windows >}} Windows](https://www.laptopmag.com/articles/show-full-folder-path-file-explorer), [{{< fa brands apple >}} Mac](https://support.apple.com/guide/mac-help/get-file-folder-and-disk-information-on-mac-mchlp1774/mac), [{{< fa brands linux >}} Linux](https://askubuntu.com/questions/23413/how-can-you-quickly-get-the-complete-path-to-a-file-for-use-in-terminal)\n\n4.  In the Console, type in `setwd(\"<paste path here>\")`, where you paste your file path from step 3 between the quotes. Hit enter.\n\n5.  In the `words-noinput.R` file, hit the \"source\" button in the top right. Do you get the same output that you got from running the file as a script from the terminal? Why do you think that is?\n\n6.  Click on the last line of the file and hit Run (or Ctrl/Cmd + Enter). Do you get the output now?\n\n7.  Click on the first line of the file and hit Run (or Ctrl/Cmd + Enter). This runs a single line of the file. Use this to run each line of the file in turn. What could you learn from doing this?\n\n#### Python\n\n1.  Use RStudio or your preferred python editor to open the `words-noinput.py` file in the `scripts` folder you downloaded and unzipped.\n\n2.  What do you notice about the appearance of the file? Is there an icon in the tab to tell you what type of file it is? Are some words in the file highlighted?\n\n3.  Copy the path to the scripts folder.\\\n    OS Specific Instructions: [{{< fa brands windows >}} Windows](https://www.laptopmag.com/articles/show-full-folder-path-file-explorer), [{{< fa brands apple >}} Mac](https://support.apple.com/guide/mac-help/get-file-folder-and-disk-information-on-mac-mchlp1774/mac), [{{< fa brands linux >}} Linux](https://askubuntu.com/questions/23413/how-can-you-quickly-get-the-complete-path-to-a-file-for-use-in-terminal)\n\n4.  In the Console, type in `setwd(\"<paste path here>\")`, where you paste your file path from step 3 between the quotes. Hit enter.\n\n5.  In the `words-noinput.py` file, hit the \"source\" button in the top right. Do you get the same output that you got from running the file as a script from the terminal? What changes?\n\n6.  Click on the first line of the file and hit Run (or Ctrl/Cmd + Enter). This runs a single line of the file. Use this to run each line of the file in turn. What do you learn from doing this?\n:::\n:::\n\nUsing scripts interactively allows us to see what is happening in the script step-by-step, and to examine the results during the program's evaluation. This can be beneficial when applying a script to a new dataset, because it allows us to change things on the fly while still keeping the same basic order of operations.\n\n## Writing Code for People\n\nOne problem with scripts and interactive modes of using programming languages is that we're spending most of our time writing code for computers to read -- which doesn't necessarily imply that our code is easy for **humans** to read.\n\nThere are two solutions to this problem, and I encourage you to make liberal use of both of them (together).\n\n### Code Comments\n\nA **comment** is a part of computer code which is intended only for people to read. It is not evaluated or run by the computing language.\n\nTo \"comment out\" a single line of code in R or python, put a `#` (pound sign/hashtag) just before the part of the code you do not want to be evaluated.\n\n::: callout-demo\n#### Adding Comments to Code\n\n::: panel-tabset\n##### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n2 + 2 # + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# This line is entirely commented out\n```\n:::\n\n\n##### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n2 + 2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n\n```{.python .cell-code}\n2 + 2 # + 3\n# This line is entirely commented out\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n:::\n:::\n\nMany computing languages, such as Java, C/C++, and JavaScript have mechanisms to comment out an entire paragraph. Neither R nor Python has so-called \"block comments\" - instead, you can use keyboard shortcuts in RStudio to comment out an entire chunk of code (or text) using Ctrl/Cmd-Shift-C.\n\n### Literate Programming - Notebooks and more!\n\nWhile code comments add human-readable text to code, scripts with comments are still primarily formatted for the computer's convenience. However, most of the time spent on any given document is spent by people, not by computers. We often write parallel documents - user manuals, academic papers, tutorials, etc. which explain the purpose of our code and how to use it, but this can get clumsy over time, and requires updating multiple documents (sometimes in multiple places), which often leads to the documentation getting out-of-sync from the code.\n\nTo solve this problem, Donald Knuth invented the concept of **literate programming**: interspersing text and code in the *same document* using structured text to indicate which lines are code and which lines are intended for human consumption.\n\nThis textbook is written using a literate format - quarto markdown - which allows me to include code chunks in R, python, and other languages, alongside the text, pictures, and other formatting necessary to create a textbook.\n\n#### Quarto\n\nOne type of literate programming document is a **quarto markdown** document.\n\nWe will use quarto markdown documents for most of the components of this class because they allow you to answer assignment questions, write reports with figures and tables generated from data, and provide code all in the same file.\n\nWhile literate documents aren't ideal for jobs where a computer is doing things unobserved (such as pulling data from a web page every hour), they are extremely useful in situations where it is desireable to have both code and an explanation of what the code is doing and what the results of that code are in the same document.\n\n::: callout-tip\n##### Your turn: Quarto Markdown\n\nIn RStudio, create a new quarto markdown document: File \\> New File \\> Quarto Document. Give your document a title and an author, and select HTML as the output.\n\nCopy the following text into your document and hit the \"Render\" button at the top of the file.\n\n    This defines an R code chunk. The results will be included in the compiled HTML file.\n\n    ```{{r}}\n    2 + 2 \n    ```\n\n    This defines a python code chunk. The results will be included in the compiled HTML file.\n\n    ```{{python}}\n    2 + 2\n    ```\n\n    # This is a header\n\n    ## This is a subheader\n\n    I can add paragraphs of text, as well as other structured text such as lists:\n\n    1. First thing\n    2. Second thing\n      - nested list\n      - nested list item 2\n    3. Third thing\n\n    I can even include images and [links](https://www.oldest.org/entertainment/memes/)\n\n    ![Goodwin's law is almost as old as the internet itself.](https://www.oldest.org/wp-content/uploads/2017/10/Godwins-Law.jpg)\n:::\n\nMarkdown is a format designed to be readable and to allow document creators to focus on content rather than style.\n\n> A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. -- John Gruber\n\nYou can read more about pandoc markdown (and quarto markdown, which is a specific type of pandoc markdown) [here](https://quarto.org/docs/authoring/markdown-basics.html) [@positpbcQuartoMarkdownBasics2023].\n\nMarkdown documents are **compiled** into their final form (usually, HTML, PDF, Docx) in multiple stages: 1. All code chunks are run and the results are saved and inserted into the markdown document.\\\nRmd/qmd -\\> md\n\n2.  The markdown document is converted into its final format using **pandoc**, a program that is designed to ensure you can generate almost any document format. This may involve conversion to an intermediate file (e.g. .tex files for PDF documents).\n\nAn error in your code will likely cause a failure at stage 1 of the process. An error in the formatting of your document, or missing pictures, and miscellaneous other problems may cause errors in stage 2.\n\n::: {.callout-note icon=\"fa-timeline\"}\n##### History\n\nQuarto markdown is the newest version of a long history of literate document writing in R. A previous version, Rmarkdown, had to be compiled using R; quarto can be compiled using R or python or the terminal directly.\n\nPrior to Rmarkdown, the R community used `knitr` and `Sweave` to integrate R code with LaTeX documents (another type of markup document that has a steep learning curve and is harder to read).\n:::\n\n#### Jupyter\n\nWhere quarto comes primarily out of the R community and those who are agnostic whether R or Python is preferable for data science related computing, Jupyter is essentially an equivalent notebook technology that comes from the python side of the world.\n\nQuarto supports using the jupyter engine for chunk compilation, but jupyter notebooks have some (rather technical) features that make them less desirable for an introductory computing class [@xieFirstNotebookWar2018].\n\n::: callout-learnmore\n#### Learn More about Notebooks\n\nThere are some excellent opinions surrounding the use of notebooks in data analysis:\n\n-   [Why I Don't Like Notebooks\"](https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/preview#slide=id.g362da58057_0_1) by Joel Grus at JupyterCon 2018\n-   [The First Notebook War](https://yihui.org/en/2018/09/notebook-war/) by Yihui Xie (response to Joel's talk).\n\nYihui Xie is the person responsible for `knitr` and `Rmarkdown` and was involved in the development of `quarto`.\n:::\n\n## References {#part-tools-03-refs}\n",
    "supporting": [
      "03-scripts-notebooks_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}