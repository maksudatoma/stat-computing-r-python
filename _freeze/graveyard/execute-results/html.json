{
  "hash": "a4271249c711fee573d9a6ca3f527aa7",
  "result": {
    "markdown": "# Other Topics {#sec-other-topics}\n\n## Mathematical Logic {#sec-math-logic}\n\nIn @sec-data-struct and @sec-control-struct we talk about more complicated data structures and control structures (for loops, if statements). \nI've included this section because it may be useful to review some concepts from mathematical logic.\n\nUnfortunately, to best demonstrate mathematical logic, I'm going to need you to know that a vector is like a list of the same type of thing. \nIn R, vectors are defined using `c()`, so `c(1, 2, 3)` produces a vector with entries 1, 2, 3. \nIn Python, we'll primarily use `numpy` arrays, which we create using `np.array([1, 2, 3])`. \nTechnically, this is creating a list, and then converting that list to a numpy array. \n\n\n### And, Or, and Not\n\nWe can combine logical statements using and, or, and not.\n\n- (X AND Y) requires that both X and Y are true.\n- (X OR Y) requires that one of X or Y is true.\n- (NOT X) is true if X is false, and false if X is true. Sometimes called **negation**.\n\nIn R, we use `!` to symbolize NOT, in Python, we use `~` for vector-wise negation (NOT).\n\nOrder of operations dictates that NOT is applied before other operations. So `NOT X AND Y` is read as `(NOT X) AND (Y)`. You must use parentheses to change the way this is interpreted.\n\n::: panel-tabset\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, TRUE, FALSE)\ny <- c(TRUE, TRUE, FALSE, FALSE)\n\nx & y # AND\n## [1]  TRUE FALSE FALSE FALSE\nx | y # OR\n## [1]  TRUE  TRUE  TRUE FALSE\n!x & y # NOT X AND Y\n## [1] FALSE  TRUE FALSE FALSE\nx & !y # X AND NOT Y\n## [1] FALSE FALSE  TRUE FALSE\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nx = np.array([True, False, True, False])\ny = np.array([True, True, False, False])\n\nx & y\n## array([ True, False, False, False])\nx | y\n## array([ True,  True,  True, False])\n~x & y\n## array([False,  True, False, False])\nx & ~y\n## array([False, False,  True, False])\n```\n:::\n\n:::\n\n### De Morgan's Laws\n\n[De Morgan's Laws](https://en.wikipedia.org/wiki/De_Morgan%27s_laws) are a set of rules for how to combine logical statements. You can represent them in a number of ways:\n\n-   NOT(A or B) is equivalent to NOT(A) and NOT(B)\n-   NOT(A and B) is equivalent to NOT(A) or NOT(B)\n\n::: panel-tabset\nWe can also represent them with Venn Diagrams.\n\n#### Definitions\n\n![Venn Diagram of Set A and Set B](images/other/SetA and SetB.png)\n\nSuppose that we set the convention that ![Shaded regions are TRUE, unshaded regions are FALSE](images/other/TrueFalse.png).\n\n#### DeMorgan's First Law\n\n![A venn diagram illustration of De Morgan's laws showing that the region that is outside of the union of A OR B (aka NOT (A OR B)) is the same as the region that is outside of (NOT A) and (NOT B)](images/other/DeMorgan1.png)\n\n#### DeMorgan's Second Law\n\n![A venn diagram illustration of De Morgan's laws showing that the region that is outside of the union of A AND B (aka NOT (A AND B)) is the same as the region that is outside of (NOT A) OR (NOT B)](images/other/DeMorgan2.png)\n:::\n\n\n\n## Controlling Loops with Break, Next, Continue {#sec-controlling-loops}\n\n<!-- https://www.py4e.com/html3/05-iterations -->\n\n<!-- https://www.datamentor.io/r-programming/break-next/ -->\n\nSometimes it is useful to control the statements in a loop with a bit more precision. \nYou may want to skip over code and proceed directly to the next iteration, or, as demonstrated in the previous section with the `break` statement, it may be useful to exit the loop prematurely.\n\n### Break Statement\n\n![A break statement is used to exit a loop prematurely](images/other/break-statement.png)\n\n### Next/Continue Statement \n\n![A next (or continue) statement is used to skip the body of the loop and continue to the next iteration](images/other/next-statement-flow.png)\n\n\n::: callout-warning\n### Example: Next/continue and Break statements\nLet's demonstrate the details of next/continue and break statements.\n\nWe can do different things based on whether i is evenly divisible by 3, 5, or both 3 and 5 (thus divisible by 15)\n\n::: panel-tabset\n#### R {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:20) {\n  if (i %% 15 == 0) {\n    print(\"Exiting now\")\n    break\n  } else if (i %% 3 == 0) {    \n    print(\"Divisible by 3\")\n    next\n    print(\"After the next statement\") # this should never execute\n  } else if (i %% 5 == 0) {\n    print(\"Divisible by 5\")\n  } else {\n    print(i)\n  }\n}\n## [1] 1\n## [1] 2\n## [1] \"Divisible by 3\"\n## [1] 4\n## [1] \"Divisible by 5\"\n## [1] \"Divisible by 3\"\n## [1] 7\n## [1] 8\n## [1] \"Divisible by 3\"\n## [1] \"Divisible by 5\"\n## [1] 11\n## [1] \"Divisible by 3\"\n## [1] 13\n## [1] 14\n## [1] \"Exiting now\"\n```\n:::\n\n\n#### Python {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in range(1, 20):\n  if i%15 == 0:\n    print(\"Exiting now\")\n    break\n  elif i%3 == 0:\n    print(\"Divisible by 3\")\n    continue\n    print(\"After the next statement\") # this should never execute\n  elif i%5 == 0:\n    print(\"Divisible by 5\")\n  else: \n    print(i)\n## 1\n## 2\n## Divisible by 3\n## 4\n## Divisible by 5\n## Divisible by 3\n## 7\n## 8\n## Divisible by 3\n## Divisible by 5\n## 11\n## Divisible by 3\n## 13\n## 14\n## Exiting now\n```\n:::\n\n:::\n:::\n\nTo be quite honest, I haven't really ever needed to use next/continue statements when I'm programming, and I rarely use break statements. However, it's useful to know they exist just in case you come across a problem where you could put either one to use.\n\n\n## Recursion {#sec-recursion}\n\nUnder construction. \n\nIn the meantime, check out @datamentorRecursion2017 (R) and @parewalabspvtPythonRecursion2020 (Python) for decent coverage of the basic idea of recursive functions.\n\n\n\n## Text Encoding {#sec-text-encoding}\n\n\nI've left this section in because it's a useful set of tricks, even though it does primarily deal with SAS. \n\nDon't know what UTF-8 is? [Watch this excellent YouTube video explaining the history of file encoding!](https://www.youtube.com/watch?v=MijmeoH9LT4)\n\nSAS also has procs to accommodate CSV and other delimited files. \nPROC IMPORT may be the simplest way to do this, but of course a DATA step will work as well. \nWe do have to tell SAS to treat the data file as a UTF-8 file (because of the japanese characters). \n\n\nWhile writing this code, I got an error of \"Invalid logical name\" because originally the filename was pokemonloc. Let this be a friendly reminder that your dataset names in SAS are limited to 8 characters in SAS. \n\n```\n/* x \"curl https://raw.githubusercontent.com/shahinrostami/pokemon_dataset/master/pokemon_gen_1_to_8.csv > ../data/pokemon_gen_1-8.csv\";\nonly run this once to download the file... */\nfilename pokeloc '../data/pokemon_gen_1-8.csv' encoding=\"utf-8\";\n\n\nproc import datafile = pokeloc out=poke\n  DBMS = csv; /* comma delimited file */\n  GETNAMES = YES\n  ;\nproc print data=poke (obs=10); /* print the first 10 observations */\n  run;\n```\n\nAlternately (because UTF-8 is finicky depending on your OS and the OS the data file was created under), you can convert the UTF-8 file to ASCII or some other safer encoding before trying to read it in.\n\nIf I fix the file in R (because I know how to fix it there... another option is to fix it manually), \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\ntmp <- read_csv(\"https://raw.githubusercontent.com/shahinrostami/pokemon_dataset/master/pokemon_gen_1_to_8.csv\")[,-1]\nwrite_csv(tmp, \"../data/pokemon_gen_1-8.csv\")\n\ntmp <- select(tmp, -japanese_name) %>%\n  # iconv converts strings from UTF8 to ASCII by transliteration - \n  # changing the characters to their closest A-Z equivalents.\n  # mutate_all applies the function to every column\n  mutate_all(iconv, from=\"UTF-8\", to = \"ASCII//TRANSLIT\")\n\nwrite_csv(tmp, \"../data/pokemon_gen_1-8_ascii.csv\", na='.')\n```\n:::\n\n\nThen, reading in the new file allows us to actually see the output.\n```\nlibname classdat \"sas/\";\n/* Create a library of class data */\n\nfilename pokeloc  \"../data/pokemon_gen_1-8_ascii.csv\";\n\nproc import datafile = pokeloc out=classdat.poke\n  DBMS = csv /* comma delimited file */\n  replace;\n  GETNAMES = YES;\n  GUESSINGROWS = 1028 /* use all data for guessing the variable type */\n  ;\nproc print data=classdat.poke (obs=10); /* print the first 10 observations */\n  run; \n```\n\nThis trick works in so many different situations. It's very common to read and do initial processing in one language, then do the modeling in another language, and even move to a different language for visualization. Each programming language has its strengths and weaknesses; if you know enough of each of them, you can use each tool where it is most appropriate. \n\n\n\n## References {#sec-other-topics-refs}",
    "supporting": [
      "graveyard_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}