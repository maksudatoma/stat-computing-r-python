{
  "hash": "1a8254825a7e66ff367401220b87bfba",
  "result": {
    "markdown": "# Data Visualization Basics {#sec-basic-data-vis}\n\nThis section is intended as a very light overview of how you might create charts in R and python. @sec-data-vis will be much more in depth.\n\n## {{< fa bullseye >}} Objectives \n\n- Use ggplot2/plotnine to create a chart\n- Begin to identify issues with data formatting\n\n## First Steps\n\nNow that you can read data in to R and python and define new variables, you can create plots! \nData visualization is a skill that takes a lifetime to learn, but for now, let's start out easy:  let's talk about how to make (basic) plots in R (with `ggplot2`) and in python (with `plotnine`, which is a ggplot2 clone).\n\n::: callout-demo\n### Graphing HBCU Enrollment\nLet's work with Historically Black College and University enrollment. \n\n::: panel-tabset\n\n#### Loading Libraries\n\n**R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbcu_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')\n\nlibrary(ggplot2)\n```\n:::\n\n\n\n**Python**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom plotnine import *\n\nhbcu_all = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')\n```\n:::\n\n\n\n#### Line Chart\n\nggplot2 and plotnine work with data frames. \nIf you pass a data frame in as the data argument, you can refer to columns in that data with \"bare\" column names (you don't have to reference the full data object using `df$name` or `df.name`; you can instead use `name` or `\"name\"`):\n\n**R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nggplot(hbcu_all, aes(x = Year, y = `4-year`)) + geom_line() +\n  ggtitle(\"4-year HBCU College Enrollment\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-pdf/line-graph-r-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n**Python**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nggplot(hbcu_all, aes(x = \"Year\", y = \"4-year\")) + geom_line() + \\\n  ggtitle(\"4-year HBCU College Enrollment\")\n## <ggplot: (8759743120294)>\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-pdf/line-graph-python-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Data Formatting\n\nIf your data is in the right format, ggplot2 is very easy to use; if your data aren't formatted neatly, it can be a real pain. \nIf you want to plot multiple lines, you need to either list each variable you want to plot, one by one, or (more likely) you want to get your data into \"long form\". \nYou don't need to know exactly how this works, but it is helpful to see the difference in the two datasets:\n\n**R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nhbcu_long <- pivot_longer(hbcu_all, -Year, names_to = \"type\", values_to = \"value\")\n\nhead(hbcu_all)\n## # A tibble: 6 x 12\n##    Year Total e~1  Males Females 4-yea~2 2-yea~3 Total~4 4-yea~5 2-yea~6 Total~7\n##   <dbl>     <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n## 1  1976    222613 104669  117944  206676   15937  156836  143528   13308   65777\n## 2  1980    233557 106387  127170  218009   15548  168217  155085   13132   65340\n## 3  1982    228371 104897  123474  212017   16354  165871  151472   14399   62500\n## 4  1984    227519 102823  124696  212844   14675  164116  151289   12827   63403\n## 5  1986    223275  97523  125752  207231   16044  162048  147631   14417   61227\n## 6  1988    239755 100561  139194  223250   16505  173672  158606   15066   66083\n## # ... with 2 more variables: `4-year - Private` <dbl>,\n## #   `2-year - Private` <dbl>, and abbreviated variable names\n## #   1: `Total enrollment`, 2: `4-year`, 3: `2-year`, 4: `Total - Public`,\n## #   5: `4-year - Public`, 6: `2-year - Public`, 7: `Total - Private`\nhead(hbcu_long)\n## # A tibble: 6 x 3\n##    Year type              value\n##   <dbl> <chr>             <dbl>\n## 1  1976 Total enrollment 222613\n## 2  1976 Males            104669\n## 3  1976 Females          117944\n## 4  1976 4-year           206676\n## 5  1976 2-year            15937\n## 6  1976 Total - Public   156836\n```\n:::\n\n\n\n**Python**: (data look the same as in R)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhbcu_long = pd.melt(hbcu_all, id_vars = ['Year'], value_vars = hbcu_all.columns[1:11])\n```\n:::\n\n\n\nIn the long form of the data, we have a row for each data point (year x measurement type), not for each year.\n\n#### Long Form Plot\n\n**R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nggplot(hbcu_long, aes(x = Year, y = value, color = type)) + geom_line() +\n  ggtitle(\"HBCU College Enrollment\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-pdf/long-form-demo-r-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n**Python**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nggplot(hbcu_long, aes(x = \"Year\", y = \"value\", color = \"variable\")) + geom_line() + \\\n  ggtitle(\"HBCU College Enrollment\") + \\\n  theme(subplots_adjust={'right':0.75}) # This moves the key so it takes up 25% of the area\n## <ggplot: (8759742776149)>\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-pdf/long-form-demo-python-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n:::\n",
    "supporting": [
      "02-basic-data-vis_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}