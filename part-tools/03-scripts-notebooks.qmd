# Scripts and Notebooks

## Objectives  {.nonumber}

1.  Understand the different modes that can be used to interact with a programming language
2.  Identify which mode and language is being used given a screenshot or other contextual information
3.  Select the appropriate mode for a given task given considerations such as target audience, human intervention, and need to repeat the analysis.

## A Brief History of Talking to Computers

The fundamental goal of this chapter is to learn how to talk to R and Python. In the very beginning, people told computers what to do using punch cards [@punched2023]. This required that you have every step of your program and data planned out in advance - you'd submit your punch cards to the computer, and then come back 24-72 hours later to find out you'd gotten two cards out of order. Dropping a tray of punch cards was ... problematic.

Thankfully, we're mostly free of the days where being a bit clumsy could erase a semester worth of hard work.

As things grew more evolved and we got actual monitors and (eventually) graphical interfaces, we started using interactive terminals (**interactive mode**) to boss computers around.

::: callout-tip
### Your Turn - Interactive Mode

::: panel-tabset
#### R

Open RStudio and navigate to the Console tab. You can issue commands directly to R by typing something in at the `>` prompt.

Try typing in `2+2` and hit enter.

#### Python

Open RStudio and navigate to the Terminal tab. This is your computer's 'terminal' - where you tell the computer what to do.

First, we have to tell it what language we'd like to work in - by default, it's going to work in Batch (Windows), Bash (Linux), or Zsh (Mac). Luckily, we can avoid these and tell the computer we want to work in python by typing in `python3` or `python` (depending on how your computer is set up). This will launch an interactive python session (**ipython**).

You should get a prompt that looks like this: `>>>`

Type in `2+2` and hit enter.
:::
:::

Interactive mode is useful for quick, one-off analyses, but if you need to repeat an analysis (or remember what you did), interactive mode is just awful. Once you close the program, the commands (and results) are gone. This is particularly inconvenient when you need to run the same task multiple times. For example, each day I may want to pull the weather forecast and observed weather values from the national weather service using the same commands. I don't want to manually re-type them each day!

To somewhat address this issue, most computing languages allow you to provide a sequence of commands in a text file known as a **script**. Scripts are typically meant to run on their own - they may perform computations, format data and save it, scrape data from the web... the possibilities are endless, but they are typically meant to run without the person running the script having to read all of the commands.

::: callout-tip
### Your Turn - Script Mode

Download \[scripts.zip\]() and unzip the file. Open a system terminal in the directory where you unzipped the files by following the instructions for your OS:

-   {{< fa brands windows >}} Open the folder. Type cmd into the location bar at the top of the window and hit enter. The command prompt will open in the desired location.
-   {{< fa brands apple >}} Open a finder window and navigate to the folder you want to use. If you don't have a path bar at the bottom of the finder window, choose View \> Show Path Bar. Control-click the folder in the path bar and choose Open in Terminal
-   {{< fa brands linux >}} Open the folder in your file browser. Select the path to the folder in the path bar and copy it to the clipboard. Launch a terminal and type `cd`, and then paste the copied path. Hit enter. (There may be more efficient ways to do this, but these instructions work for most window managers).

### R

This assumes that the R binary has been added to your system path. If these instructions don't work, please ask for help or visit office hours.

In the terminal, type `Rscript words.R dickens-oliver-twist.txt`

You should get some output that looks like this:

    user@computer:~/scripts$ Rscript words.R dickens-oliver-twist.txt 
    text
     the  and        to   of    a  his   in   he  was 
    8854 4902 4558 3767 3763 3569 2272 2224 1931 1684

### Python

This assumes that the python binary has been added to your system path. If these instructions don't work, please ask for help or visit office hours.

In the terminal, type `python3 words.py` and hit Enter. You will be prompted for the file name. Enter `dickens-oliver-twist.txt` and hit Enter again.

You should get some output that looks like this:

    user@computer:~/scripts$ python3 words.py 
    Enter file:dickens-oliver-twist.txt
    the 8854
:::

Scripts, and compiled programs generated from scripts, are responsible for much of what you interact with on a computer or cell phone day-to-day. When the goal is to process a file or complete a task in exactly the same way each time, a script is the right choice for the job.

However, when working with data, we sometimes prefer to combine scripts with interactive mode - that is, we use a script file to keep track of which commands we run, but we run the script interactively. About 60% of my day-to-day computing is done using R or python scripts that are run interactively.

::: callout-tip
### Your Turn - Interactive Scripts
:::
