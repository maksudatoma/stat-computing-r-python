name: Render and deploy Quarto files
on:
  push:
  pull_request:

jobs:
  quarto-render-and-deploy:
    runs-on: ubuntu-latest
    container: rocker/verse:latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_PAT: ${{ secrets.GH_PAT }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}

    steps:
    - uses: actions/checkout@v4

    - name: Change ownership of /github/home
      run: sudo chown -R $(whoami) /github/home

    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt upgrade
        sudo apt install -y libudunits2-dev libgdal-dev
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
      shell: /bin/bash {0}

    - name: Renv setup
      uses: r-lib/actions/setup-renv@v2

    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
        cache-dependency-path: requirements.txt
        cache: 'pip'
      env:
        PIP_ROOT_USER_ACTION: ignore

    - name: Cache python packages
      id: python_cache
      uses: actions/cache@v4
      with:
        path: venv
        key: pip--${{ hashFiles('requirements.txt') }}

    - name: Set environment variables
      id: set-env-vars
      run: |
        echo 'RETICULATE_PYTHON=venv/bin/python' >> $GITHUB_ENV

    - name: Restore Python package cache in R
      if: steps.python_cache.outputs.cache-hit != 'true'
      shell: Rscript {0}
      run: |
        # Check if venv exists (restored from secondary keys if any, and delete)
        # You might not need this line if you only have one primary key for the venv caching
        # I kept it in my code as a fail-safe
        if (reticulate::virtualenv_exists("venv")) {
          reticulate::virtualenv_remove("venv")
        }

        # Re-create the venv and install deps
        python_ver <- readLines(".python-version")
        reticulate::virtualenv_create("venv", requirements = "requirements.txt", python = python_ver)

    # - name: Restore Python package cache
    #   if: steps.python_cache.outputs.cache-hit != 'true'
    #   run: |
    #     # Check if venv exists (restored from secondary keys if any, and delete)
    #     # You might not need this line if you only have one primary key for the venv caching
    #     # I kept it in my code as a fail-safe
    #     if [ -d "venv" ]; then rm -rf venv; fi
    #
    #     # Re-create the venv
    #     python3 -m venv venv
    #
    #     # Install dependencies
    #     venv/bin/python3 -m pip install -r requirements.txt

    - uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 1.5.57
        tinytex: true

    - name: Render Quarto Project
      shell: /bin/bash {0}
      run: |
        quarto render --execute-debug

    - name: "Deploy to gh-pages"
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
